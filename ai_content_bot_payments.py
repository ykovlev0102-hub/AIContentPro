"""
ai_content_bot_payments.py
AIContentPro ‚Äî Telegram-–±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π + –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot (TON/USDT/Stars).
–í–ê–ñ–ù–û: –ù–ï –≤—Å—Ç–∞–≤–ª—è–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å—é–¥–∞. –£–∫–∞–∂–∏ –∏—Ö –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.
"""

import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice
from aiogram.utils import executor
import openai

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

DATA_FILE = "users_data.json"
FREE_DAILY_QUOTA = 3

if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not PAYMENT_PROVIDER_TOKEN:
    raise SystemExit("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_TOKEN, OPENAI_API_KEY –∏ PAYMENT_PROVIDER_TOKEN –≤ Environment Variables.")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY


# ------------------ –•–†–ê–ù–ò–õ–ò–©–ï ------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"users": {}, "conversations": {}}


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


data = load_data()


def get_user(uid):
    uid = str(uid)
    users = data.setdefault("users", {})
    if uid not in users:
        users[uid] = {
            "free_used_today": 0,
            "last_reset": datetime.utcnow().date().isoformat(),
            "is_paid": False,
            "paid_until": None,
        }
        save_data(data)
    return users[uid]


def reset_quota(user):
    last = datetime.fromisoformat(user["last_reset"])
    if datetime.utcnow().date() > last.date():
        user["free_used_today"] = 0
        user["last_reset"] = datetime.utcnow().date().isoformat()


# ------------------ OpenAI ------------------
def ask_openai(prompt, model="gpt-4", max_tokens=600, temperature=0.8):
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=max_tokens,
            temperature=temperature,
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OpenAI: {e}"


# ------------------ –û–ü–õ–ê–¢–´ ------------------
@dp.message_handler(commands=["buy"])
async def cmd_buy(message: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å –≤ TON", callback_data="buy_ton"),
        types.InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å –≤ USDT", callback_data="buy_usdt"),
    )
    kb.add(types.InlineKeyboardButton("‚≠ê Telegram Stars", callback_data="buy_stars"))
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å—è—Ü):", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy_"))
async def process_buy(callback: types.CallbackQuery):
    currency = callback.data.split("_", 1)[1].upper()

    if currency == "USDT":
        prices = [LabeledPrice(label="AIContentPro ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å—è—Ü (USDT)", amount=10 * 100)]
        currency_code = "USD"
    elif currency == "TON":
        prices = [LabeledPrice(label="AIContentPro ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å—è—Ü (TON)", amount=15 * 100)]
        currency_code = "USD"
    else:
        prices = [LabeledPrice(label="AIContentPro ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å—è—Ü (Stars)", amount=100 * 100)]
        currency_code = "XTR"

    try:
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title="AIContentPro ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ (1 –º–µ—Å—è—Ü)",
            description=f"–û–ø–ª–∞—Ç–∞ –≤ {currency}. –ë–µ–∑–ª–∏–º–∏—Ç –∏–¥–µ–π –Ω–∞ 30 –¥–Ω–µ–π.",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=currency_code,
            prices=prices,
            start_parameter=f"sub_{currency.lower()}",
            payload=f"subscription_{currency.lower()}_{datetime.utcnow().isoformat()}",
        )
        await bot.answer_callback_query(callback.id)
    except Exception as e:
        await bot.answer_callback_query(callback.id, str(e))


@dp.pre_checkout_query_handler(lambda q: True)
async def pre_checkout(pre_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_q.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user = get_user(message.from_user.id)
    user["is_paid"] = True
    user["paid_until"] = (datetime.utcnow() + timedelta(days=30)).isoformat()
    save_data(data)
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ 30 –¥–Ω–µ–π.")


# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message_handler(commands=["start", "help"])
async def start_cmd(message: types.Message):
    user = get_user(message.from_user.id)
    reset_quota(user)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("/ideas", "/buy", "/status")
    text = (
        "ü§ñ *AIContentPro* ‚Äî —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∏–¥–µ–π –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üìå /ideas <—Ç–µ–º–∞> ‚Äî 5 –∏–¥–µ–π + —Ç–µ–∫—Å—Ç—ã\n"
        "üí∞ /buy ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞\n"
        "üìä /status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–≤–æ—Ç—ã\n"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)


@dp.message_handler(commands=["status"])
async def status_cmd(message: types.Message):
    user = get_user(message.from_user.id)
    reset_quota(user)
    remain = FREE_DAILY_QUOTA - user["free_used_today"]
    paid_until = user["paid_until"] or "‚Äî"
    await message.answer(
        f"üìä –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user['is_paid'] else '‚ùå –ù–µ—Ç'}\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {paid_until}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remain}"
    )


@dp.message_handler(commands=["ideas"])
async def ideas_cmd(message: types.Message):
    args = message.get_args().strip()
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /ideas —Ç–µ–º–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä `/ideas –∫–æ—Å–º–µ—Ç–∏–∫–∞`")
        return

    user = get_user(message.from_user.id)
    reset_quota(user)

    if not user["is_paid"]:
        if user["free_used_today"] >= FREE_DAILY_QUOTA:
            await message.reply("‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ö—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /buy")
            return
        user["free_used_today"] += 1
        save_data(data)

    await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")

    prompt = (
        f"–î–∞–π 5 –∏–¥–µ–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É '{args}'. "
        "–î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏ –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ 2-3 —Ö—ç—à—Ç–µ–≥–∞."
    )
    result = ask_openai(prompt)

    convs = data.setdefault("conversations", {})
    convs.setdefault(str(message.from_user.id), []).append(
        {"ts": datetime.utcnow().isoformat(), "topic": args, "result": result}
    )
    save_data(data)

    await message.answer(result)


@dp.message_handler()
async def fallback(message: types.Message):
    await message.reply("–ù–µ –ø–æ–Ω—è–ª ü§î. –ò—Å–ø–æ–ª—å–∑—É–π /ideas <—Ç–µ–º–∞> –∏–ª–∏ /buy.")


if __name__ == "__main__":
    print("üöÄ AIContentPro –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    executor.start_polling(dp, skip_updates=True)
